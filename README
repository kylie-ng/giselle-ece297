🌍 GISelle: A Safer, Smarter Mapping System
GISelle is an interactive, safety-focused navigation system built using advanced geographic information system (GIS) algorithms. Designed by a team of engineering students, GISelle enhances traditional street-mapping applications with features tailored toward women’s safety and rapid response.

This project was completed through multiple development milestones as part of a university-level GIS course. Below is a high-level overview of each milestone, its goals, the key algorithms implemented, and system improvements.

📌 Milestone 1: Data Integration & Basic Rendering
Goal:
Initialize the GIS system by parsing OpenStreetMap data into a searchable format and rendering it using a basic GUI.

Core Focus:

Parsed .bin map data to extract streets, intersections, and POIs.

Designed a user interface using EZGL graphics library for rendering a vector-based map.

Enabled panning, zooming, and hover interaction for a smooth user experience.

Suggested Media:

📷 “Map Rendering Demo” screenshot of initial UI

🎥 Video: EZGL map interface walkthrough

🧭 Milestone 2: Autocomplete & Search
Goal:
Enable users to search for partial street names and retrieve valid results in real time.

Core Focus:

Implemented a custom Trie data structure for prefix-based street name search.

Integrated full-street and partial match functionality with real-time feedback.

Displayed matching results interactively on the GUI with visual cues.

Suggested Media:

📷 Screenshot: “Autocomplete in action”

🎥 Video: Autocomplete test cases

🧠 Milestone 3: Pathfinding with A* Algorithm
Goal:
Develop a fast and responsive routing system using A search* to compute the optimal path between two intersections.

Core Focus:

Implemented the A* pathfinding algorithm with a time-based cost function.

Integrated a turn penalty to simulate realistic travel scenarios.

Prioritized main roads to align with real-world user behavior and safety preferences (more visibility, safer routes).

Technical Note:
A* used a priority queue to balance travel cost (g) and heuristic estimate (h). This greatly reduced search space while ensuring optimal time-based routing.

Suggested Media:

📷 Screenshot: “Shortest route rendered on map”

🎥 Video: A* Search + Emergency Redirects

📦 Milestone 4: Traveling Courier Problem
Goal:
Solve a multi-pickup, multi-dropoff delivery route planning problem with depot constraints using metaheuristics.

Core Focus:

Implemented Multi-Destination Dijkstra to precompute travel times between all relevant nodes.

Applied Multi-Start + 2-Opt Simulated Annealing (SA) for iterative route optimization.

Used parallelism (via std::thread) to run heuristics concurrently for faster results under a 50-second constraint.

SA Challenge:
We attempted a traditional temperature-based SA model, but after empirical testing, found no meaningful improvement in route quality under time constraints. We refined our heuristics instead.

Suggested Media:

📷 Diagram: “Before vs After route optimization”

🎥 Video: Courier algorithm running in real-time

🔐 Final Features: Safety-Focused Mapping
Goal:
Extend GISelle’s routing and map features to prioritize women’s safety and real-world responsiveness.

Core Features Added:

Find-Nearest-Police Button (re-routes on tap).

Emergency Helpline Toggle based on region.

Usability/Response Testing: System Usability Score (SUS) + timed action responses.

Future Vision: Street-lighting-aware routing, Uber API integration for safer rides, and crowdsourced safety flagging.

Suggested Media:

📷 Screenshot: “Emergency safety UI overlay”

🎥 Demo: GISelle Emergency Features in Action

📊 Testing + Results
Usability: SUS scores from 10 participants rated GISelle highly for confidence and integration.

Responsiveness: Majority located safety buttons in under 2 seconds.

Courier Efficiency: Route time improved by 10–15 seconds using multi-start and custom 2-opt.

🔮 What’s Next?
GISelle’s mission continues:

🌃 Add API-driven street-lighting mode

🚗 Seamless handoff to Uber Women Rider Preference

🧭 Enable community-driven safety reporting via a backend

🧠 Key Learnings
Algorithm design impacts user safety when paired with thoughtful UI.

Precomputation and parallelism unlock near-instant responsiveness.

Heuristics like multi-start and 2-opt (with enhancements) outperform pure greedy methods in real time.

Want the full walkthrough with visuals?
👉 Watch our Final Presentation Demo
👉 Explore our Poster Slide Deck can u make this girhib ike copy 
